@model IEnumerable<Product>
@using System.Globalization

@{
    // Filter products to only include those with active categories
    var activeProducts = Model.Where(product => product.Category.IsActive);
}

<form method="get" action="@Url.Action("Search", "Home", new { area = "User" })" class="d-flex justify-content-end align-items-center">
    <div class="form-group mb-0">
        <input type="text" id="search" name="searchString" class="form-control rounded-pill small-search" placeholder="Search..." />
    </div>
    <button type="submit" class="btn btn-primary rounded-pill ml-2">Search</button>
</form>



<!-- Image Banner -->
<div class="container mt-3">
    <div class="row">
        <div class="col">
            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img class="d-block w-100" src="~/images/other/Banner1.webp" alt="First slide">
                    </div>
                    <div class="carousel-item">
                        <img class="d-block w-100" src="~/images/other/Banner2.webp" alt="Second slide">
                    </div>
                    <div class="carousel-item">
                        <img class="d-block w-100" src="~/images/other/Banner3.webp" alt="Third slide">
                    </div>
                </div>
                <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
        </div>
    </div>
</div>

<div class ="container mt-3">

    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="https://localhost:7208/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">All plants</li>
        </ol>
    </nav>

</div>


<div class="container mt-3">
    <div class="row">
        <div class="col-md-3 border-end border-gray">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0">FILTER</h6>
                <i class="bi bi-filter-right"></i>
            </div>
            <div class="form-group mt-2">
                <label for="category">Category:</label>
                <select id="category" class="form-control">
                    <option value="">All</option>
                    @foreach (var category in Model.Select(p => p.Category.Name).Distinct())
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>
            <div class="form-group mt-2">
                <label for="price">Price Range:</label>
                <select id="price" class="form-control">
                    <option value="">All</option>
                    <option value="250-500">250 - 500</option>
                    <option value="500-1000">500 - 1000</option>
                    <!-- Add more options as needed -->
                </select>
                <br />
            </div>
            <div class="form-group mt-2">
                <div class="d-flex justify-content-between align-items-center">
                    <label for="sortBy" class="mb-0">SORT BY</label>
                    <i class="bi bi-sort-alpha-down"></i>
                </div>
                <br />
                <div id="sortOptions">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="sortBy" id="priceLowToHigh" value="priceLowToHigh">
                        <label class="form-check-label" for="priceLowToHigh">Price: Low to High</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="sortBy" id="priceHighToLow" value="priceHighToLow">
                        <label class="form-check-label" for="priceHighToLow">Price: High to Low</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="sortBy" id="nameAsc" value="nameAsc">
                        <label class="form-check-label" for="nameAsc">A to Z</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="sortBy" id="nameDesc" value="nameDesc">
                        <label class="form-check-label" for="nameDesc">Z to A</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="row pb-4 bg-light-gray p-3" id="product-list">
                @foreach (var product in activeProducts)
                {
                    <div class="col-lg-4 col-md-6 mb-4 product-card" data-category="@product.Category.Name" data-price="@product.Price">
                        <div class="card border-0 shadow rounded product-card-inner">
                            <!-- Heart icon -->
                            <div class="wishlist-icon position-absolute top-0 end-0">
                                <i class="bi bi-heart-fill" onclick="addToWishlist(@product.Id, this)" data-toggle="tooltip" data-placement="top" title="Add to Wishlist"></i>
                            </div>

                            <div class="card-body">
                                @if (product.ProductImages != null && product.ProductImages.Any())
                                {
                                    <a asp-action="Details" asp-controller="Home" asp-route-id="@product.Id"></a>
                                    <img src="@product.ProductImages.FirstOrDefault().ImageUrl" class="card-img-top img-fluid" alt="Product">
                                }
                                else
                                {
                                    <a asp-action="Details" asp-controller="Home" asp-route-id="@product.Id"></a>
                                    <img src="https://placehold.co/300x200" class="card-img-top img-fluid" alt="Product">
                                }

                                <div class="p-lg-1">
                                    <p class="card-title h5 text-dark opacity-75 text-uppercase text-center">@product.Name</p>
                                </div>

                                @if (product.DiscountedPrice < product.Price)
                                {
                                    <div class="p-lg-1 text-center">
                                        <span class="text-success h5">&#x20b9 @product.DiscountedPrice</span>
                                        <span class="text-muted text-decoration-line-through ms-2">@product.Price.ToString("c", new System.Globalization.CultureInfo("en-IN"))</span>
                                        <span class="text-danger ms-2">(@((int)((product.Price - product.DiscountedPrice) / product.Price * 100))% off)</span>
                                    </div>
                                }
                                else
                                {
                                    <div class="p-lg-1 text-center">
                                        <span class="text-success h5"> @product.Price.ToString("c", new System.Globalization.CultureInfo("en-IN"))</span>
                                    </div>
                                }

                                <div>
                                    @if (product.Qty < 1)
                                    {
                                        <a asp-action="ViewProduct" asp-route-id="@product.Id" class="btn btn-danger bg-gradient border-0 form-control">Out Of Stock</a>
                                    }
                                    else
                                    {
                                        <a asp-action="ViewProduct" asp-route-id="@product.Id" class="btn btn-primary bg-gradient border-0 form-control">View Product</a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="d-flex justify-content-center mb-5">
    <ul class="pagination">
        @if (Model.Any())
        {
            var currentPage = 1; // Initial page
            var itemsPerPage = 6; // Number of items per page
            var totalProducts = Model.Count(); // Total number of products
            var totalPages = (int)Math.Ceiling(totalProducts / (double)itemsPerPage); // Calculate total pages
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="#" onclick="changePage(@currentPage - 1)">Previous</a>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" href="#" onclick="changePage(@i)">@i</a>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <a class="page-link" href="#" onclick="changePage(@currentPage + 1)">Next</a>
            </li>
        }
    </ul>
</div>

@section Scripts {
    <script>
        //Initial variables
        var currentPage = 1;
        var itemsPerPage = 6;

        // Function to filter products based on selected category and price range
        function filterProducts() {
            var selectedCategory = $('#category').val();
            var selectedPriceRange = $('#price').val();

            $('.product-card').each(function () {
                var productCategory = $(this).data('category');
                var productPrice = parseFloat($(this).data('price'));

                var showProduct = true;

                // Filter based on selected category
                if (selectedCategory && selectedCategory !== "" && selectedCategory !== productCategory) {
                    showProduct = false;
                }

                // Filter based on selected price range
                if (selectedPriceRange && selectedPriceRange !== "" && !isPriceInRange(productPrice, selectedPriceRange)) {
                    showProduct = false;
                }

                // Show/hide product based on filtering
                if (showProduct) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });

            updatePagination();
        }

        // Function to update pagination links
        function updatePagination() {
            var totalProducts = $('.product-card:visible').length; // Total number of visible products after filtering
            var totalPages = Math.ceil(totalProducts / itemsPerPage); // Calculate total pages

            // Remove existing pagination links
            $('.pagination').empty();

            // Add pagination links
            if (totalPages > 0) {
                for (var i = 1; i <= totalPages; i++) {
                    $('.pagination').append('<li class="page-item ' + (i === currentPage ? 'active' : '') + '"><a class="page-link" href="#" onclick="changePage(' + i + ')">' + i + '</a></li>');
                }
            }
        }

        // Function to check if price is within selected range
        function isPriceInRange(price, range) {
            var rangeValues = range.split('-');
            var minPrice = parseFloat(rangeValues[0]);
            var maxPrice = parseFloat(rangeValues[1]);

            return price >= minPrice && price <= maxPrice;
        }

        $(document).ready(function () {
            // Event listener for category and price dropdown change
            $('#category, #price').change(function () {
                filterProducts();
                currentPage = 1; // Reset current page
            });

            // Event listener for sorting radio buttons change
            $('input[name="sortBy"]').change(function () {
                filterProducts(); // Sort products based on selected option
            });

            filterProducts(); // Initial filtering
        });

        // Function to sort products by price (low to high)
        function sortByPriceLowToHigh() {
            var products = $('.product-card').get();
            products.sort(function (a, b) {
                var priceA = parseFloat($(a).data('price'));
                var priceB = parseFloat($(b).data('price'));
                return priceA - priceB;
            });
            $('#product-list').empty().append(products);
        }

        // Function to sort products by price (high to low)
        function sortByPriceHighToLow() {
            var products = $('.product-card').get();
            products.sort(function (a, b) {
                var priceA = parseFloat($(a).data('price'));
                var priceB = parseFloat($(b).data('price'));
                return priceB - priceA;
            });
            $('#product-list').empty().append(products);
        }

        // Function to sort products by name (A to Z)
        function sortByNameAToZ() {
            var products = $('.product-card').get();
            products.sort(function (a, b) {
                var nameA = $(a).find('.card-title').text().toLowerCase();
                var nameB = $(b).find('.card-title').text().toLowerCase();
                return nameA.localeCompare(nameB);
            });
            $('#product-list').empty().append(products);
        }

        // Function to sort products by name (Z to A)
        function sortByNameZToA() {
            var products = $('.product-card').get();
            products.sort(function (a, b) {
                var nameA = $(a).find('.card-title').text().toLowerCase();
                var nameB = $(b).find('.card-title').text().toLowerCase();
                return nameB.localeCompare(nameA);
            });
            $('#product-list').empty().append(products);
        }

        $(document).ready(function () {
            // Event listener for sorting radio buttons change
            $('input[name="sortBy"]').change(function () {
                var sortBy = $(this).val();
                if (sortBy === 'priceLowToHigh') {
                    sortByPriceLowToHigh();
                } else if (sortBy === 'priceHighToLow') {
                    sortByPriceHighToLow();
                } else if (sortBy === 'nameAsc') {
                    sortByNameAToZ();
                } else if (sortBy === 'nameDesc') {
                    sortByNameZToA();
                }
            });
        });

        //wishlist function
        function addToWishlist(productId, icon) {
            $.ajax({
                url: '/User/WishList/AddToWishlist',
                type: 'POST',
                data: { productId: productId },
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        // Optionally, you can reload the page or update the UI
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });
        }
    </script>
}
